(do (+ 1 3) (+ 1 1))
(do (+ 1 2 3 4 5 6 7 8 9 10))
(do (def x 1) x)
((fn (x) x) 1)
((fn (x) ((fn (x) x) x)) ((fn (x) x) 1))
(do (def x (fn () 1)) (x))
((fn () 1))
(((fn (x) (fn (y) (+ x y))) 1) 2)
(= 1 1)
(= 1 2)
(if #t 1 2)
(do (def (f x) x) (f 1))
(do (def x 1)
    (def f (fn () x))
    (def f2 (fn (x) (f)))
    (f2 2))
(do (def x 1)
    (def f (fn () x))
    (def f2 (fn (x) (f)))
    (set x 3)
    (f2 2))
(do (def F 
         (fn (x)
             (if (= x 0)
                 1
                 (* x (F (- x 1))))))
    (F 5))
(do (def Y (fn (f)
                 ((fn (u) (u u))
                  (fn (g) (f (fn (x) ((g g) x)))))))
    ((Y (fn (f)
            (fn (x) (if (= x 0) 1 (* x (f (- x 1))))))) 
     5))
(let ([x 1] [y 1]) (+ x y))
(let ([x 2] [y x]) (+ x y))
(let ([x (let ([x (let ([x 1] [y 1]) (+ x y))]
               [y 1]) (+ x y))]
      [y x])
      (+ x y))
(do (def (gcd a b)
        (if (= b 0)
            a
            (gcd b (% a b))))
    (gcd 4 8))
(eval '(+ 1 1))
(do (def x 1) (eval '(+ x x)))
(do (def x 1) (eval '(do (def x 2) (+ x x))) x)
(shl 1 2)
(shr 1 2)
(do (def x 10)
    (def res 0)
    (while (> x 0)
        (do (set res (+ res x))
            (set x (- x 1))))
    res)
(do (def (pwr b p)
            (do (def ans 1)
                (while (!= p 0)
                    (do (if (= (& p 1) 1)
                            (set ans (* ans b)))
                        (set b (* b b))
                        (set p (shr p 1))))
                ans))
    (pwr 3 6))
(filter (fn (x) #t) '(1 2 3))
(filter (fn (x) #f) '(1 2 3))
(reduce (fn (x y) (+ x y)) '(1 2 3) 0)
(map (fn (x) (+ x 1)) '(1 2 3))
(do (def x 1) '(x ,(do x)))
(do (def (quicksort lst)
    (if (= (. lst __len__) 0)
        '()
        (let ([frist (. lst __getitem__ 0)]
                [rest (split lst 1)])
            (+ (quicksort (filter (fn (x) (< x frist)) rest))
                '(,(do frist))
                (quicksort (filter (fn (x) (>= x frist)) rest)))
        )
    ))
    (quicksort '(5 4 46 465 1 8 58 5 41 81 6 84 1 8))
)
(do (def x 1)
    (def y (lazy x))
    (do (def x 2) y))
((do ((fn (x) (fn (y) x)) 1)) 2)
(do (def f (do ((fn (x) (fn (y) x)) 1))) (f 2))
(do (def f nil) (do (set f ((fn (x) (fn (y) x)) 1))) (f 2))
(((do ((do (fn (x) (fn (y) (fn (z) (+ x y z))))) 1)) 2) 3)
(apply + '(1 2 3))
(do (def (add ...) (apply + ...)) (add 1 2 3))