(def ($len lst) (. lst __len__))
(def ($first lst) (. lst __getitem__ 0))
(def ($second lst) (. lst __getitem__ 1))
(def ($rest lst) (split lst 1))
(def ($empty? lst) (= (len ...) 0))

(def ($cond $...)
    ; (cond <<bool|"else"> <expr>>)
     (let ([else #t])
          (if (eval (first ...))
              (eval (second ...))
              (apply cond (split ... 2)))))

(def ($or $...)
    (if (empty? ...)
        #f
        (let ([b (eval (first ...))])
             (if b b (apply or (rest ...))))))

(def (not _)
     (if _
         #f
         #t))

(def ($and $...)
    (if (empty? ...)
        #t
        (let ([b (eval (first ...))])
        (if b (apply or (rest ...)) b))))

