(def ($len lst) (. lst __len__))
(def ($first lst) (. lst __getitem__ 0))
(def ($second lst) (. lst __getitem__ 1))
(def ($rest lst) (split lst 1))
(def ($empty? lst) (= (len lst) 0))

(def ($cond $bool $expr $...)
    ; (cond <<bool|"else"> <expr>>)
     (let ([else #t])
          (if (eval bool)
              (eval expr)
              (if (not (empty? ...))
                  (apply cond ...)
              ))))

(def ($or $...)
    (if (empty? ...)
        #f
        (let ([b (eval (first ...))])
             (if b b (apply or (rest ...))))))

(def (not _)
     (if _
         #f
         #t))

(def ($and $...)
    (if (empty? ...)
        #t
        (let ([b (eval (first ...))])
        (if b (apply or (rest ...)) b))))

(def (print obj) (printf (concat (. obj __str__) " ")))

(def (println obj)
    (printf (. obj __str__))
    (printf "\n")
)